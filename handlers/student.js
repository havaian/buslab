const { Markup } = require('telegraf');
const User = require('../models/user');
const Request = require('../models/request');
const { isStudent, getOrCreateUser, getStudentMenuKeyboard, canTakeRequests } = require('./common');
const { logAction, logWarn } = require('../logger');
const { t } = require('../utils/i18nHelper');

// Student state management (in-memory for simplicity)
const studentStates = new Map();

/**
 * Handle "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" button
 */
const handleTakeRequest = async (ctx, bot) => {
  try {
    // Check if user is in student chat
    if (!canTakeRequests(ctx)) {
      await ctx.answerCbQuery('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–º —á–∞—Ç–µ.');
      return;
    }

    const requestId = ctx.callbackQuery.data.split(':')[1];

    // Get request
    const request = await Request.findById(requestId)
      .populate('categoryId');

    if (!request) {
      await ctx.answerCbQuery('–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }

    if (request.status !== 'approved') {
      await ctx.answerCbQuery('–≠—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —Å—Ç–∞—Ç—É—Å–µ.');
      return;
    }

    const user = await getOrCreateUser(ctx);

    // *** AUTO-ASSIGN STUDENT ROLE IF NOT ALREADY SET ***
    if (user.role === 'user') {
      user.role = 'student';
      await user.save();
      logAction('user_auto_became_student', { userId: user._id });
    }

    // Check if user already has an active assignment
    if (user.currentAssignmentId) {
      await ctx.answerCbQuery(t(ctx, 'errors.already_has_assignment'));
      return;
    }

    // Update request with student
    request.status = 'assigned';
    request.studentId = user._id;
    await request.save();

    // Update user with active assignment
    user.currentAssignmentId = request._id;
    await user.save();

    // Update message in student chat
    const studentName = user.username ? `@${user.username}` : `${user.firstName || '–°—Ç—É–¥–µ–Ω—Ç'} ${user.lastName || ''}`;
    await ctx.editMessageText(
      ctx.callbackQuery.message.text + `\n\n–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É: ${studentName}`,
      { reply_markup: { inline_keyboard: [] } }
    );

    // Send request details to student in private chat (in Russian)
    const detailMessage = `
üì® –û–±—Ä–∞—â–µ–Ω–∏–µ #${request._id}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${request.categoryId.name} ${request.categoryId.hashtag}

üìù –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:
${request.text}

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞".
`;

    await bot.telegram.sendMessage(
      user.telegramId,
      detailMessage,
      Markup.keyboard([
        ['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞'],
        ['–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç'],
        ['–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è']
      ]).resize()
    );

    // Set student state to writing answer
    studentStates.set(user.telegramId, {
      state: 'writing_answer',
      requestId: request._id
    });

    await ctx.answerCbQuery('–û–±—Ä–∞—â–µ–Ω–∏–µ –≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    logAction('student_took_request', {
      studentId: user._id,
      requestId: request._id,
      autoPromoted: user.role === 'student'
    });
  } catch (error) {
    console.error('Error handling take request:', error);
    await ctx.answerCbQuery(t(ctx, 'errors.general'));
  }
};

/**
 * Handle "–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã" / "Mening javoblarim" action for students
 */
const handleMyAnswers = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);

    if (!isStudent(user)) {
      await ctx.reply(t(ctx, 'errors.student_only'));
      return;
    }

    // Get all requests handled by this student
    const requests = await Request.find({ studentId: user._id })
      .sort({ updatedAt: -1 })
      .populate('categoryId')
      .populate('userId');

    if (requests.length === 0) {
      await ctx.reply('–í—ã –ø–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.');
      await ctx.reply(t(ctx, 'lists.select_action'), getStudentMenuKeyboard(ctx));
      return;
    }

    let message = 'üìã –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n';

    requests.forEach((request, index) => {
      const date = request.updatedAt.toLocaleDateString('ru-RU');
      const userInfo = request.userId.username
        ? `@${request.userId.username}`
        : `ID:${request.userId.telegramId}`;

      message += `${index + 1}. ${request.categoryId.name} - ${t(ctx, `statuses.${request.status}`)}\n`;
      message += `   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userInfo}\n`;
      message += `   ${t(ctx, 'lists.request_date')} ${date}\n`;

      if (request.answerText) {
        const truncatedAnswer = request.answerText.length > 150
          ? request.answerText.substring(0, 147) + '...'
          : request.answerText;
        message += `   ${t(ctx, 'lists.answer_label')} ${truncatedAnswer}\n`;
      }

      if (request.adminComment) {
        message += `   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${request.adminComment}\n`;
      }

      message += '\n';
    });

    await ctx.reply(message);
    await ctx.reply(t(ctx, 'lists.select_action'), getStudentMenuKeyboard(ctx));

    await logAction('student_viewed_answers', { userId: user._id });
  } catch (error) {
    console.error('Error handling student answers:', error);
    await ctx.reply(t(ctx, 'errors.general'));
    await ctx.reply(t(ctx, 'lists.select_action'), getStudentMenuKeyboard(ctx));
  }
};

/**
 * Handle "–¢–µ–∫—É—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ" / "Joriy murojaat" action for students
 */
const handleCurrentAssignment = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);

    if (!isStudent(user)) {
      await ctx.reply(t(ctx, 'errors.student_only'));
      return;
    }

    if (!user.currentAssignmentId) {
      await ctx.reply(t(ctx, 'errors.no_active_assignment'));
      await ctx.reply(t(ctx, 'lists.select_action'), getStudentMenuKeyboard(ctx));
      return;
    }

    const request = await Request.findById(user.currentAssignmentId)
      .populate('categoryId')
      .populate('userId');

    if (!request) {
      await ctx.reply('–¢–µ–∫—É—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      // Clear invalid assignment
      user.currentAssignmentId = null;
      await user.save();
      await ctx.reply(t(ctx, 'lists.select_action'), getStudentMenuKeyboard(ctx));
      return;
    }

    const userInfo = request.userId.username
      ? `@${request.userId.username}`
      : `ID:${request.userId.telegramId}`;

    let message = `üì® –¢–µ–∫—É—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #${request._id}\n`;
    message += `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${request.categoryId.name} ${request.categoryId.hashtag}\n`;
    message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userInfo}\n`;
    message += `üìä –°—Ç–∞—Ç—É—Å: ${t(ctx, `statuses.${request.status}`)}\n`;
    message += `üìÖ –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: ${request.createdAt.toLocaleDateString('ru-RU')}\n\n`;
    message += `üìù –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:\n${request.text}\n`;

    if (request.answerText) {
      message += `\n‚úèÔ∏è –í–∞—à –æ—Ç–≤–µ—Ç:\n${request.answerText}`;
    }

    if (request.adminComment) {
      message += `\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n${request.adminComment}`;
    }

    await ctx.reply(message);

    // Show appropriate keyboard based on status
    if (request.status === 'assigned') {
      await ctx.reply(t(ctx, 'lists.select_action'), Markup.keyboard([
        [t(ctx, 'buttons.reject_assignment')],
        [t(ctx, 'buttons.back')]
      ]).resize());
    } else {
      await ctx.reply(t(ctx, 'lists.select_action'), getStudentMenuKeyboard(ctx));
    }

    await logAction('student_viewed_current_assignment', {
      userId: user._id,
      requestId: request._id
    });
  } catch (error) {
    console.error('Error handling current assignment:', error);
    await ctx.reply(t(ctx, 'errors.general'));
    await ctx.reply(t(ctx, 'lists.select_action'), getStudentMenuKeyboard(ctx));
  }
};

/**
 * Handle "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" / "Statistika" action for students
 */
const handleStudentStats = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);

    if (!isStudent(user)) {
      await ctx.reply(t(ctx, 'errors.student_only'));
      return;
    }

    const totalAssigned = await Request.countDocuments({ studentId: user._id });
    const inProgress = await Request.countDocuments({
      studentId: user._id,
      status: 'assigned'
    });
    const awaitingReview = await Request.countDocuments({
      studentId: user._id,
      status: 'answered'
    });
    const completed = await Request.countDocuments({
      studentId: user._id,
      status: 'closed'
    });

    let message = `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n`;
    message += `üì® –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: ${totalAssigned}\n`;
    message += `üîÑ –í —Ä–∞–±–æ—Ç–µ: ${inProgress}\n`;
    message += `‚úÖ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${awaitingReview}\n`;
    message += `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${completed}\n`;

    if (totalAssigned > 0) {
      const completionRate = ((completed / totalAssigned) * 100).toFixed(1);
      message += `\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${completionRate}%`;
    }

    await ctx.reply(message);
    await ctx.reply(t(ctx, 'lists.select_action'), getStudentMenuKeyboard(ctx));

    await logAction('student_viewed_stats', { userId: user._id });
  } catch (error) {
    console.error('Error handling student stats:', error);
    await ctx.reply(t(ctx, 'errors.general'));
    await ctx.reply(t(ctx, 'lists.select_action'), getStudentMenuKeyboard(ctx));
  }
};

/**
 * Handle student answer
 */
const handleStudentAnswer = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);

    if (!user.currentAssignmentId) {
      return; // No active assignment
    }

    const studentState = studentStates.get(user.telegramId);
    if (!studentState || studentState.state !== 'writing_answer') {
      return;
    }

    const answerText = ctx.message.text;

    // Update student state
    studentStates.set(user.telegramId, {
      state: 'confirming_answer',
      requestId: studentState.requestId,
      answerText
    });

    await ctx.reply(
      t(ctx, 'prompts.check_answer') + '\n\n' + answerText,
      Markup.keyboard([
        [t(ctx, 'buttons.confirm_answer')],
        [t(ctx, 'buttons.edit_answer')],
        [t(ctx, 'buttons.reject_assignment')]
      ]).resize()
    );
  } catch (error) {
    console.error('Error handling student answer:', error);
    await ctx.reply(t(ctx, 'errors.general'));
  }
};

/**
 * Handle "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞" / "Javob yuborishni tasdiqlash" button
 */
const handleConfirmAnswer = async (ctx, bot) => {
  try {
    const user = await getOrCreateUser(ctx);

    if (!user.currentAssignmentId) {
      await ctx.reply(t(ctx, 'errors.no_active_assignment'));
      return;
    }

    const studentState = studentStates.get(user.telegramId);
    if (!studentState || studentState.state !== 'confirming_answer') {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ.');
      return;
    }

    const request = await Request.findById(studentState.requestId)
      .populate('categoryId');

    if (!request) {
      await ctx.reply('–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }

    // Update request with answer
    request.status = 'answered';
    request.answerText = studentState.answerText;
    await request.save();

    // Send answer to admin chat for approval
    const adminChatId = process.env.ADMIN_CHAT_ID;
    const adminMessage = `
üì® –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ #${request._id}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${request.categoryId.name} ${request.categoryId.hashtag}
üë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${user.username ? `@${user.username}` : user.telegramId}

üìù –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:
${request.text}

‚úèÔ∏è –û—Ç–≤–µ—Ç:
${request.answerText}
`;

    await bot.telegram.sendMessage(adminChatId, adminMessage, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve_answer:${request._id}` },
            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `decline_answer:${request._id}` }
          ]
        ]
      }
    });

    await ctx.reply('–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω.');
    studentStates.delete(user.telegramId);

    logAction('student_submitted_answer', {
      studentId: user._id,
      requestId: request._id
    });
  } catch (error) {
    console.error('Error handling confirm answer:', error);
    await ctx.reply(t(ctx, 'errors.general'));
  }
};

/**
 * Handle "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç" / "Javobni o'zgartirish" button
 */
const handleEditAnswer = async (ctx) => {
  try {
    const user = await getOrCreateUser(ctx);

    if (!user.currentAssignmentId) {
      await ctx.reply(t(ctx, 'errors.no_active_assignment'));
      return;
    }

    const studentState = studentStates.get(user.telegramId);
    if (!studentState) {
      return;
    }

    // Update student state
    studentStates.set(user.telegramId, {
      state: 'writing_answer',
      requestId: studentState.requestId
    });

    await ctx.reply(
      '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∑–∞–Ω–æ–≤–æ:',
      Markup.keyboard([
        [t(ctx, 'buttons.reject_assignment')]
      ]).resize()
    );
  } catch (error) {
    console.error('Error handling edit answer:', error);
    await ctx.reply(t(ctx, 'errors.general'));
  }
};

/**
 * Handle edit answer callback
 */
const handleEditAnswerCallback = async (ctx) => {
  try {
    const requestId = ctx.callbackQuery.data.split(':')[1];

    const request = await Request.findById(requestId)
      .populate('categoryId');

    if (!request) {
      await ctx.answerCbQuery('–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }

    const user = await getOrCreateUser(ctx);

    if (request.studentId.toString() !== user._id.toString()) {
      await ctx.answerCbQuery('–≠—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥—Ä—É–≥–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.');
      return;
    }

    // Update student state
    studentStates.set(user.telegramId, {
      state: 'writing_answer',
      requestId: request._id
    });

    await ctx.answerCbQuery();
    await ctx.reply(
      '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∑–∞–Ω–æ–≤–æ:',
      Markup.keyboard([
        [t(ctx, 'buttons.reject_assignment')]
      ]).resize()
    );
  } catch (error) {
    console.error('Error handling edit answer callback:', error);
    await ctx.answerCbQuery(t(ctx, 'errors.general'));
  }
};

/**
 * Handle "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è" / "Murojaatdan voz kechish" button or callback
 */
const handleRejectAssignment = async (ctx, bot) => {
  try {
    const user = await getOrCreateUser(ctx);

    if (!user.currentAssignmentId) {
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery(t(ctx, 'errors.no_active_assignment'));
      } else {
        await ctx.reply(t(ctx, 'errors.no_active_assignment'));
      }
      return;
    }

    let requestId;

    // Handle both text button and callback
    if (ctx.callbackQuery) {
      requestId = ctx.callbackQuery.data.split(':')[1];
      await ctx.answerCbQuery();
    } else {
      requestId = user.currentAssignmentId;
    }

    const request = await Request.findById(requestId)
      .populate('categoryId');

    if (!request) {
      await ctx.reply('–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }

    // Update request and user
    request.status = 'approved';
    request.studentId = null;
    await request.save();

    user.currentAssignmentId = null;
    await user.save();

    // Send back to student chat
    const studentChatId = process.env.STUDENT_CHAT_ID;
    const studentMessage = `
üì® –û–±—Ä–∞—â–µ–Ω–∏–µ #${request._id} (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å)
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${request.categoryId.name} ${request.categoryId.hashtag}

üìù –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:
${request.text}
`;

    await bot.telegram.sendMessage(studentChatId, studentMessage, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîÑ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', callback_data: `take_request:${request._id}` }
          ]
        ]
      }
    });

    // Reset to main menu keyboard
    const { getMainMenuKeyboard } = require('./common');
    if (ctx.callbackQuery) {
      await ctx.reply('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è. –û–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å.');
    } else {
      await ctx.reply('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è. –û–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å.');
    }

    await ctx.reply(t(ctx, 'lists.select_action'), getMainMenuKeyboard(ctx));
    studentStates.delete(user.telegramId);

    logAction('student_rejected_assignment', {
      studentId: user._id,
      requestId: request._id
    });
  } catch (error) {
    console.error('Error handling reject assignment:', error);
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(t(ctx, 'errors.general'));
    } else {
      await ctx.reply(t(ctx, 'errors.general'));
    }
  }
};

module.exports = {
  handleTakeRequest,
  handleStudentAnswer,
  handleConfirmAnswer,
  handleEditAnswer,
  handleEditAnswerCallback,
  handleRejectAssignment,
  handleMyAnswers,
  handleCurrentAssignment,
  handleStudentStats,
  studentStates
};